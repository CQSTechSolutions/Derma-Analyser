import * as MailComposer from 'expo-mail-composer';
import { Alert, Platform } from 'react-native';
import { AnalysisResult } from '../types';
import axios from 'axios';

// IMPORTANT: Update this URL to match your server
// For physical device testing with local server, replace with your computer's IP address
// e.g. 'http://192.168.1.100:3000' instead of 'localhost'
// const BACKEND_URL = Platform.OS === 'web' ? 'http://localhost:3000' : 'http://10.0.2.2:3000'; // Android Emulator â†’ localhost
const BACKEND_URL = 'https://dermaanalyserserver-cqstechsolutions.vercel.app'; // For web testing

export interface EmailReportData {
  results: AnalysisResult;
  treatments: string[];
}

/**
 * Formats the analysis results into an HTML email body
 */
const formatEmailBody = (reportData: EmailReportData): string => {
  const { results, treatments } = reportData;
  
  // Format treatments list if available
  let treatmentsHtml = '';
  if (treatments && treatments.length > 0) {
    treatmentsHtml = `
      <h3>Suggested Natural Treatments:</h3>
      <ul>
        ${treatments.map(treatment => `<li>${treatment}</li>`).join('')}
      </ul>
    `;
  }

  // Create HTML email body
  return `
    <html>
      <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
          <h1 style="color: #4F46E5; text-align: center; margin-bottom: 30px;">Skin Condition Analysis Report</h1>
          
          <div style="background-color: #f9fafb; border-radius: 10px; padding: 20px; margin-bottom: 20px;">
            <h2 style="color: #4F46E5; margin-top: 0;">${results.name}</h2>
            
            <h3>Description:</h3>
            <p>${results.description}</p>
            
            <h3>Symptoms:</h3>
            <p>${results.symptoms}</p>
            
            <h3>Causes:</h3>
            <p>${results.causes}</p>
            
            <h3>Treatment:</h3>
            <p>${results.treatment}</p>
            
            ${treatmentsHtml}
          </div>
          
          <div style="text-align: center; color: #6B7280; font-size: 14px; margin-top: 30px;">
            <p>This report was generated by Derma Analyser.</p>
            <p>Please consult with a healthcare professional for proper diagnosis and treatment.</p>
          </div>
        </div>
      </body>
    </html>
  `;
};

/**
 * Checks if email is available on the device
 */
export const checkMailAvailability = async (): Promise<boolean> => {
  try {
    const isAvailable = await MailComposer.isAvailableAsync();
    console.log('Mail composer available:', isAvailable);
    return isAvailable;
  } catch (error) {
    console.error('Error checking mail availability:', error);
    return false;
  }
};

/**
 * Sends an email report using Expo Mail Composer
 */
export const sendEmailWithMailComposer = async (
  email: string,
  reportData: EmailReportData
): Promise<boolean> => {
  try {
    console.log('Starting email composition for:', email);
    
    // Check if email is available
    const isAvailable = await checkMailAvailability();
    
    if (!isAvailable) {
      console.error('Email is not available on this device');
      Alert.alert(
        'Error',
        'Email is not available on this device. Please make sure you have an email client installed.'
      );
      return false;
    }
    
    // Format the email body
    const htmlBody = formatEmailBody(reportData);
    console.log('Email HTML body generated successfully');
    
    // Compose the email
    const result = await MailComposer.composeAsync({
      recipients: [email],
      subject: `Skin Analysis Report: ${reportData.results.name}`,
      body: htmlBody,
      isHtml: true,
    });
    
    console.log('Mail composer result:', result);
    return result.status === 'sent';
  } catch (error) {
    console.error('Error sending email with Mail Composer:', error);
    Alert.alert(
      'Email Error',
      'Failed to send email. Please try again later.'
    );
    return false;
  }
};

/**
 * Sends a test email to check if the backend is working
 */
export const sendTestEmail = async (email: string): Promise<any> => {
  try {
    // Don't try to use the backend on web
    if (Platform.OS === 'web') {
      console.log('Web environment detected - skipping server test');
      return { success: false, skipped: true };
    }
    
    console.log(`Sending test email to ${email} via ${BACKEND_URL}/api/send-test-email`);
    
    const response = await axios.get(`${BACKEND_URL}/api/send-test-email`, {
      params: { email },
      timeout: 5000 // 5 second timeout to fail faster
    });
    
    console.log('Test email response:', response.data);
    return response.data;
  } catch (error: any) {
    // Check specifically for connection refused errors
    if (error.message && error.message.includes('Network Error')) {
      console.error('Server connection failed - network error');
      throw new Error('Server unavailable - check if the email server is running');
    }
    
    console.error('Error sending test email:', error);
    throw new Error(`Failed to send test email: ${error.message}`);
  }
};

/**
 * Sends an email report via backend API
 */
export const sendEmailReport = async (email: string, reportData: EmailReportData): Promise<any> => {
  try {
    // Skip backend API on web platform
    if (Platform.OS === 'web') {
      console.log('Web environment detected - backend email not supported');
      throw new Error('Backend email not supported in web browser');
    }
    
    console.log('Preparing to send email via backend to:', email);
    console.log(`Using backend URL: ${BACKEND_URL}`);
    
    // Validate data
    if (!email) {
      throw new Error('Email address is required');
    }
    
    if (!reportData || !reportData.results) {
      throw new Error('Report data is required');
    }
    
    // First test if the server is reachable
    try {
      const testResponse = await axios.get(`${BACKEND_URL}/api/test`, { timeout: 3000 });
      console.log('Server test response:', testResponse.data);
    } catch (testError) {
      console.error('Server test failed:', testError);
      throw new Error(`Server unreachable - make sure the email server is running`);
    }
    
    // Format the data for the backend
    const formattedData = {
      email,
      reportData: {
        results: [
          reportData.results.name,
          reportData.results.description,
          reportData.results.symptoms,
          reportData.results.causes,
          reportData.results.treatment
        ],
        treatments: reportData.treatments || []
      }
    };
    
    console.log('Sending request to backend API...');
    
    const response = await axios.post(`${BACKEND_URL}/api/send-report`, formattedData, {
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: 15000 // 15 second timeout
    });
    
    console.log('Email service response:', response.data);
    
    if (!response.data.success) {
      throw new Error(response.data.error || 'Unknown error from email service');
    }
    
    return response.data;
  } catch (error: any) {
    // Handle different types of errors
    if (error.message && error.message.includes('Network Error')) {
      console.error('Network Error connecting to server');
      throw new Error('Could not connect to email server - check if it is running');
    } else if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      console.error('Server error response:', error.response.data);
      throw new Error(`Server error: ${error.response.data?.error || error.response.statusText}`);
    } else if (error.request) {
      // The request was made but no response was received
      console.error('No response received from server');
      throw new Error('No response from email server. Check your connection or server status.');
    } else {
      // Something happened in setting up the request that triggered an Error
      console.error('Error setting up request:', error.message);
      throw new Error(`Email request error: ${error.message}`);
    }
  }
};

// Export default function that tries both methods
export default async function sendEmail(email: string, reportData: EmailReportData): Promise<boolean> {
  try {
    // Skip backend attempt on web platform
    if (Platform.OS === 'web') {
      console.log('Web environment detected - using mail composer directly');
      return await sendEmailWithMailComposer(email, reportData);
    }
    
    // First try the backend
    console.log('Attempting to send email via backend API...');
    try {
      const result = await sendEmailReport(email, reportData);
      console.log('Email sent successfully via backend!');
      return true;
    } catch (backendError) {
      console.error('Backend email failed:', backendError);
      console.log('Falling back to Mail Composer...');
      
      // If backend fails, try mail composer
      const composerResult = await sendEmailWithMailComposer(email, reportData);
      return composerResult;
    }
  } catch (error) {
    console.error('All email methods failed:', error);
    return false;
  }
}